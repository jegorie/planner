import { useAtomValue, useStore } from "jotai";
import { useCallback, useEffect, useRef } from "react";
import { taskAtoms } from "../model/task-atom";
import { useAutoSync } from "./use-auto-sync";
import type { Task } from "../types";

export const useTaskAutoSave = () => {
    const tasks = useAtomValue(taskAtoms);
    const store = useStore();
    const { scheduleSync, syncNow, isPending } = useAutoSync({
        debounceMs: 1000,
    });

    // –•—Ä–∞–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const previousTasksRef = useRef<Map<string, Task>>(new Map());
    const intervalRef = useRef<number | null>(null);
    const isInitializedRef = useRef(false);

    const checkAndSyncTasks = useCallback(() => {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –∞—Ç–æ–º–æ–≤
        const currentTasks = new Map<string, Task>();

        tasks.forEach((taskAtom) => {
            const task = store.get(taskAtom);
            currentTasks.set(task.id, task);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if (isInitializedRef.current) {
            currentTasks.forEach((currentTask, taskId) => {
                const previousTask = previousTasksRef.current.get(taskId);

                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
                if (!previousTask || !isTaskEqual(previousTask, currentTask)) {
                    console.log("üìù Task changed:", {
                        taskId,
                        previousTitle: previousTask?.title,
                        currentTitle: currentTask.title,
                        previousDesc: previousTask?.desc,
                        currentDesc: currentTask.desc,
                        isEqual: previousTask
                            ? isTaskEqual(previousTask, currentTask)
                            : false,
                    });
                    scheduleSync(currentTask);
                }
            });
        } else if (currentTasks.size > 0) {
            // –ü–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ - –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            console.log("üöÄ Initial tasks loaded, skipping sync:", currentTasks.size);
            isInitializedRef.current = true;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        previousTasksRef.current = currentTasks;
    }, [tasks, store, scheduleSync]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–∫–∞–∫ fallback)
    useEffect(() => {
        intervalRef.current = setInterval(() => {
            checkAndSyncTasks();
        }, 200); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 200–º—Å

        return () => {
            if (intervalRef.current) {
                clearInterval(intervalRef.current);
            }
        };
    }, [checkAndSyncTasks]);

    // –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    useEffect(() => {
        console.log("üîç Tasks list changed, checking for updates");
        checkAndSyncTasks();
    }, [checkAndSyncTasks]);

    return {
        syncNow,
        isPending,
    };
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
function isTaskEqual(task1: Task, task2: Task): boolean {
    if (task1.id !== task2.id) return false;
    if (task1.title?.trim() !== task2.title?.trim()) return false;
    if (task1.desc?.trim() !== task2.desc?.trim()) return false;
    if (task1.checked !== task2.checked) return false;
    if (task1.priority !== task2.priority) return false;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã labels
    if (task1.labels.length !== task2.labels.length) return false;
    const sortedLabels1 = [...task1.labels].sort();
    const sortedLabels2 = [...task2.labels].sort();
    if (!sortedLabels1.every((label, index) => label === sortedLabels2[index]))
        return false;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤—ã subTasksIds
    if (task1.subTasksIds.length !== task2.subTasksIds.length) return false;
    if (
        !task1.subTasksIds.every((id, index) => id === task2.subTasksIds[index])
    )
        return false;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º schedule (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (task1.schedule !== task2.schedule) {
        if (!task1.schedule || !task2.schedule) return false;
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if (JSON.stringify(task1.schedule) !== JSON.stringify(task2.schedule))
            return false;
    }

    return true;
}
