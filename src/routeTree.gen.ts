/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthWithSidebarImport } from './routes/_auth/_withSidebar'
import { Route as AuthWithSidebarIndexImport } from './routes/_auth/_withSidebar/index'
import { Route as NonAuthAuthTypeImport } from './routes/_nonAuth/auth.$type'
import { Route as AuthWithSidebarLabelsImport } from './routes/_auth/_withSidebar/labels'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthWithSidebarRoute = AuthWithSidebarImport.update({
  id: '/_withSidebar',
  getParentRoute: () => AuthRoute,
} as any)

const AuthWithSidebarIndexRoute = AuthWithSidebarIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthWithSidebarRoute,
} as any)

const NonAuthAuthTypeRoute = NonAuthAuthTypeImport.update({
  id: '/_nonAuth/auth/$type',
  path: '/auth/$type',
  getParentRoute: () => rootRoute,
} as any)

const AuthWithSidebarLabelsRoute = AuthWithSidebarLabelsImport.update({
  id: '/labels',
  path: '/labels',
  getParentRoute: () => AuthWithSidebarRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_withSidebar': {
      id: '/_auth/_withSidebar'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthWithSidebarImport
      parentRoute: typeof AuthImport
    }
    '/_auth/_withSidebar/labels': {
      id: '/_auth/_withSidebar/labels'
      path: '/labels'
      fullPath: '/labels'
      preLoaderRoute: typeof AuthWithSidebarLabelsImport
      parentRoute: typeof AuthWithSidebarImport
    }
    '/_nonAuth/auth/$type': {
      id: '/_nonAuth/auth/$type'
      path: '/auth/$type'
      fullPath: '/auth/$type'
      preLoaderRoute: typeof NonAuthAuthTypeImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_withSidebar/': {
      id: '/_auth/_withSidebar/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthWithSidebarIndexImport
      parentRoute: typeof AuthWithSidebarImport
    }
  }
}

// Create and export the route tree

interface AuthWithSidebarRouteChildren {
  AuthWithSidebarLabelsRoute: typeof AuthWithSidebarLabelsRoute
  AuthWithSidebarIndexRoute: typeof AuthWithSidebarIndexRoute
}

const AuthWithSidebarRouteChildren: AuthWithSidebarRouteChildren = {
  AuthWithSidebarLabelsRoute: AuthWithSidebarLabelsRoute,
  AuthWithSidebarIndexRoute: AuthWithSidebarIndexRoute,
}

const AuthWithSidebarRouteWithChildren = AuthWithSidebarRoute._addFileChildren(
  AuthWithSidebarRouteChildren,
)

interface AuthRouteChildren {
  AuthWithSidebarRoute: typeof AuthWithSidebarRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthWithSidebarRoute: AuthWithSidebarRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthWithSidebarRouteWithChildren
  '/labels': typeof AuthWithSidebarLabelsRoute
  '/auth/$type': typeof NonAuthAuthTypeRoute
  '/': typeof AuthWithSidebarIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteWithChildren
  '/labels': typeof AuthWithSidebarLabelsRoute
  '/auth/$type': typeof NonAuthAuthTypeRoute
  '/': typeof AuthWithSidebarIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/_withSidebar': typeof AuthWithSidebarRouteWithChildren
  '/_auth/_withSidebar/labels': typeof AuthWithSidebarLabelsRoute
  '/_nonAuth/auth/$type': typeof NonAuthAuthTypeRoute
  '/_auth/_withSidebar/': typeof AuthWithSidebarIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/labels' | '/auth/$type' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/labels' | '/auth/$type' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/_auth/_withSidebar'
    | '/_auth/_withSidebar/labels'
    | '/_nonAuth/auth/$type'
    | '/_auth/_withSidebar/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  NonAuthAuthTypeRoute: typeof NonAuthAuthTypeRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  NonAuthAuthTypeRoute: NonAuthAuthTypeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_nonAuth/auth/$type"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/_withSidebar"
      ]
    },
    "/_auth/_withSidebar": {
      "filePath": "_auth/_withSidebar.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/_withSidebar/labels",
        "/_auth/_withSidebar/"
      ]
    },
    "/_auth/_withSidebar/labels": {
      "filePath": "_auth/_withSidebar/labels.tsx",
      "parent": "/_auth/_withSidebar"
    },
    "/_nonAuth/auth/$type": {
      "filePath": "_nonAuth/auth.$type.tsx"
    },
    "/_auth/_withSidebar/": {
      "filePath": "_auth/_withSidebar/index.tsx",
      "parent": "/_auth/_withSidebar"
    }
  }
}
ROUTE_MANIFEST_END */
